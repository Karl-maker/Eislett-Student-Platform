generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                    Int       @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String    @unique
  hashPassword          String
  confirmationCode      String?
  confirmationExpiresAt DateTime?
  recoveryCode          String?
  recoveryExpiresAt     DateTime?
  confirmed             Boolean   @default(false)
  deactivate            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  profileImageUrl       String?
  profileImageKey       String?
  displayName           String?
}

model Question {
  id                    Int                    @id @default(autoincrement())
  title                 String
  description           String?
  content               String
  tags                  String[]
  createdAt             DateTime               @default(now())
  type                  QuestionType
  topics                QuestionTopic[]
  totalPotentialMarks   Int                    @default(1)
  difficultyLevel       Decimal                @default(0.1)
  isTrue                Boolean? // This field is specific to TRUE_FALSE questions
  shortAnswer           String? // This field is specific to SHORT_ANSWER questions
  multipleChoiceOptions MultipleChoiceOption[] // This field is specific to MULTIPLE_CHOICE questions
}

model QuestionTopic {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    Int
  assignedAt DateTime @default(now())

  @@id([questionId, topicId])
}

model Topic {
  id          Int             @id @default(autoincrement())
  name        String
  description String          @db.VarChar(1000)
  createdAt   DateTime        @default(now())
  questions   QuestionTopic[]
}

model MultipleChoiceOption {
  id         Int      @id @default(autoincrement())
  content    String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

enum QuestionType {
  TRUE_FALSE
  MULTIPLE_CHOICE
  SHORT_ANSWER
}
