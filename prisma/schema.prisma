generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                    Int            @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String         @unique
  hashPassword          String
  confirmationCode      String?
  confirmationExpiresAt DateTime?
  recoveryCode          String?
  recoveryExpiresAt     DateTime?
  confirmed             Boolean        @default(false)
  deactivate            Boolean        @default(false)
  createdAt             DateTime       @default(now())
  profileImageUrl       String?
  profileImageKey       String?
  displayName           String?
  coins                 Int            @default(0)
  Reward                Reward[]
  QuizResult            QuizResult[]
  Subscription          Subscription[]
}

model Question {
  id                    Int                    @id @default(autoincrement())
  title                 String
  description           String?
  content               String
  tags                  String[]
  createdAt             DateTime               @default(now())
  type                  QuestionType
  topics                QuestionTopic[]
  totalPotentialMarks   Int                    @default(1)
  difficultyLevel       Decimal                @default(0.1)
  isTrue                Boolean? // This field is specific to TRUE_FALSE questions
  shortAnswer           String? // This field is specific to SHORT_ANSWER questions
  multipleChoiceOptions MultipleChoiceOption[] // This field is specific to MULTIPLE_CHOICE questions
}

model QuestionTopic {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    Int
  assignedAt DateTime @default(now())

  @@id([questionId, topicId])
}

model Topic {
  id          Int             @id @default(autoincrement())
  name        String
  description String          @db.VarChar(1000)
  createdAt   DateTime        @default(now())
  questions   QuestionTopic[]
  courseTopic CourseTopic[]
}

model MultipleChoiceOption {
  id         Int      @id @default(autoincrement())
  content    String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

model Subject {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String                  @db.VarChar(1000)
  createdAt             DateTime                @default(now())
  courses               SubjectCourse[]
  primarySubject        PrimarySubject?         @relation(fields: [primarySubjectId], references: [id])
  primarySubjectId      Int?
  subjectPrimarySubject SubjectPrimarySubject[]
  Subscription          Subscription[]
}

model SubjectCourse {
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  createdAt DateTime @default(now())

  @@id([subjectId, courseId])
}

model Course {
  id            Int             @id @default(autoincrement())
  name          String
  description   String          @db.VarChar(1000)
  createdAt     DateTime        @default(now())
  subjectCourse SubjectCourse[]
  courseTopic   CourseTopic[]
}

model CourseTopic {
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId  Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  @@id([topicId, courseId])
}

model PrimarySubject {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String                  @db.VarChar(1000)
  createdAt             DateTime                @default(now())
  subjects              Subject[]
  subjectPrimarySubject SubjectPrimarySubject[]
}

model SubjectPrimarySubject {
  subject          Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId        Int
  primarySubject   PrimarySubject @relation(fields: [primarySubjectId], references: [id], onDelete: Cascade)
  primarySubjectId Int

  @@id([primarySubjectId, subjectId])
}

model Reward {
  id             Int      @id @default(autoincrement())
  coinsRewareded Int
  isCollected    Boolean
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      Int
  title          String
  message        String
  createdAt      DateTime @default(now())
}

model Subscription {
  id         Int       @id @default(autoincrement())
  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
  subject    Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  Int
  trialStart DateTime?
  trialEnd   DateTime?
  expiresAt  DateTime
  startedAt  DateTime
  canceledAt DateTime?
  status     String
  autoRenew  Boolean
  createdAt  DateTime  @default(now())
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  questions Int[]
  marks     Int[]
  createdAt DateTime @default(now())
}

enum QuestionType {
  TRUE_FALSE
  MULTIPLE_CHOICE
  SHORT_ANSWER
}
